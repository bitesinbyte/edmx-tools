@page "/Trim"
@inject IJSRuntime JSRuntime
<PageTitle>Edmx Trim</PageTitle>
<RadzenText TextStyle="TextStyle.H1" Text="Edmx Trimmer" />
<Upload @bind-XmlData=XmlData />
<RadzenSteps @bind-SelectedIndex="@selectedIndex" ShowStepsButtons="false">
    <Steps>
        <RadzenStepsItem Text="Choose Entities">
            <RadzenCard class="my-4">
                <div class="rz-p-sm-12 rz-text-align-center">
                    <RadzenLabel Text="Select Entity" Component="DropDownVirtualization"
                        Style="margin-right: 8px; vertical-align: middle;" />
                    <RadzenDropDown AllowClear="true" AllowVirtualization="true" @bind-Value=entity
                        Name="DropDownVirtualization" AllowFiltering="true" Data=@entities
                        SelectedItemChanged="@OnSelectedEntityChange" Style="width: 100%; max-width: 400px;" />
                </div>

                @foreach (var selectedEntity in selectedEntites)
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Shade="Shade.Lighter" class="rz-shadow-0"
                        id="@selectedEntity" Click="@((e) => HandlebadgeClose(selectedEntity))">
                        @selectedEntity
                        <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Primary" IsPill="true" Text="X" />
                    </RadzenButton>
                }
                <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap"
                    JustifyContent="JustifyContent.Center" Gap="2rem">

                    <div class="rz-p-12 rz-text-align-center">
                        <RadzenCheckBox @bind-Value=@ExcludeSelected Name="ExcludeSelected" />
                        <RadzenLabel Text="Exclude Selected" Component="ExcludeSelected"
                            Style="margin-left: 8px; vertical-align: middle;" />
                        <RadzenButton Click="@HandleTrim">
                            Trim
                        </RadzenButton>
                    </div>
                </RadzenStack>
            </RadzenCard>
        </RadzenStepsItem>
        <RadzenStepsItem Text="Download">
            <RadzenCard class="my-4">
                <RadzenButton Click="@DownloadTrimXmlFile" Text="Download" />
            </RadzenCard>
        </RadzenStepsItem>
    </Steps>

</RadzenSteps>

@code {
    public string XmlData { get; set; }
    int selectedIndex = 0;
    private List<string> entities
    {
        get
        {
            if (!string.IsNullOrEmpty(XmlData))
            {
                return Helpers.XmlHelpers.GetAllEntities(XmlData);
            }
            return new();
        }
    }
    private List<string> selectedEntites = new List<string>();
    private string entity = string.Empty;
    private bool ExcludeSelected = false;
    private string trimmedXmlData = string.Empty;
    void OnSelectedEntityChange(dynamic args)
    {
        entity = args;
        if (!selectedEntites.Any(x => x.Equals(entity, StringComparison.OrdinalIgnoreCase)) &&
        entities.Any(x => x.Equals(entity, StringComparison.OrdinalIgnoreCase)))
        {
            selectedEntites.Add(entity);
            entities.Remove(entity);
            entity = string.Empty;
        }
    }
    void HandlebadgeClose(string entity)
    {
        selectedEntites.Remove(entity);
        entities.Add(entity);
    }

    void HandleTrim()
    {
        trimmedXmlData = Helpers.XmlHelpers.Trim(XmlData, selectedEntites, ExcludeSelected);
        selectedIndex = 1;
    }
    async Task DownloadTrimXmlFile()
    {
        var byteArray = System.Text.Encoding.ASCII.GetBytes(trimmedXmlData);
        var stream = new MemoryStream(byteArray);
        var fileName = "trimmedMetadata.xml";

        using var streamRef = new DotNetStreamReference(stream: stream);

        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}